# Matthew Wyczalkowski <m.wyczalkowski@wustl.edu>
# https://dinglab.wustl.edu/

read -r -d '' USAGE <<'EOF'
Query GDC to obtain information about harmonized aligned reads associated with given submitted reads

Usage:
  get_harmonized_reads.sh [options] submitted_reads.dat

submitted_reads.dat is a file with submitted aligned/unaligned reads information as generated by get_submitted_reads.sh
Writes the following columns for each harmonized aligned reads entry:
    * case
    * aliquot submitter id
    * assumed reference
    * experimental strategy
    * data_format
    * file name
    * file size
    * id
    * md5sum
    * state

Options:
-h: Print this help message
-v: Verbose.  May be repeated to get verbose output from queryGDC.sh
-o OUTFN: write results to output file instead of STDOUT.  Will be overwritten if exists
-1: stop after processing one line from read_groups.dat

Require GDC_TOKEN environment variable to be defined with path to gdc-user-token.*.txt file
Note that a temporary file is written to /tmp/get_submitted_reads.XXXXXX then deleted
EOF

QUERYGDC="src/queryGDC.sh"
TMPL="/tmp/get_submitted_reads.XXXXXX"
# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":hvo:1" opt; do
  case $opt in
    h)
      echo "$USAGE"
      exit 0
      ;;
    v)  
      VERBOSE="${VERBOSE}v"
      ;;
    o)  
      OUTFN="$OPTARG"
      if [ -f $OUTFN ]; then
          >&2 echo WARNING: $OUTFN exists.  Deleting
          rm -f $OUTFN
      fi
      ;;
    1)  
      ONLYONE=1
      ;;
    \?)
      >&2 echo "Invalid option: -$OPTARG"
      echo "$USAGE"
      exit 1
      ;;
    :)
      >&2 echo "Option -$OPTARG requires an argument."
      echo "$USAGE"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

if [ "$#" -ne 1 ]; then
    >&2 echo Error: Wrong number of arguments
    echo "$USAGE"
    exit 1
fi
DAT=$1

if [ -z $GDC_TOKEN ]; then
    >&2 echo GDC_TOKEN environment variable not defined.  Quitting.
    exit 1
fi

# Called after running scripts to catch fatal (exit 1) errors
# works with piped calls ( S1 | S2 | S3 > OUT )
function test_exit_status {
    # Evaluate return value for chain of pipes; see https://stackoverflow.com/questions/90418/exit-shell-script-based-on-process-exit-code
    # exit code 137 is fatal error signal 9: http://tldp.org/LDP/abs/html/exitcodes.html

    rcs=${PIPESTATUS[*]};
    for rc in ${rcs}; do
        if [[ $rc != 0 ]]; then
            >&2 echo Fatal error.  Exiting
            exit $rc;
        fi;
    done
}

function HAR_from_SAR {
    ID=$1 # ID of SAR (submitted aligned read), e.g., 29f82e93-1da2-4c11-9cdb-5ee1aaf05549
    cat <<EOF
{
    aligned_reads(with_path_to: {type: "submitted_aligned_reads", id:"$ID"})
    { 
        experimental_strategy
        data_format
        id
        file_name
        file_size
        md5sum 
        state
    }
}
EOF
}

function HAR_from_SUR {
    ID=$1 # ID of SUR (submitted unaligned read)
    cat <<EOF
{
    aligned_reads(with_path_to: {type: "submitted_unaligned_reads", id:"$ID"})
    { 
        experimental_strategy
        data_format
        id
        file_name
        file_size
        md5sum 
        state
    }
}
EOF
}

if [ $VERBOSE ]; then
    >&2 echo Processing $DAT
    # If verbose flag repeated multiple times (e.g., VERBOSE="vvv"), pass the value of VERBOSE with one flag popped off (i.e., VERBOSE_ARG="vv")
    VERBOSE_ARG=${VERBOSE%?}
fi

while read L; do
#    * case
#    * aliquot submitter id
#    * assumed reference 
#    * experimental strategy
#    * file name
#    * file size
#    * id
#    * md5sum
#    * state

    CASE=$(echo "$L" | cut -f 1)
    ASID=$(echo "$L" | cut -f 2)
    ES=$(echo "$L" | cut -f 4)
    SRID=$(echo "$L" | cut -f 8)

    # Process results for submitted reads and make query for corresponding harmonized reads
    if [ "$ES" == "WGS" ] || [ "$ES" == "WXS" ] || [ "$ES" == "Targeted Sequencing" ]; then
        Q=$(HAR_from_SAR $SRID)
    else
        Q=$(HAR_from_SUR $SRID)
    fi

    if [ $VERBOSE ]; then
        >&2 echo QUERY: $Q
    fi

    # Query for harmonized reads
    R=$(echo $Q | $QUERYGDC -r $GDC_VERBOSE -)
    test_exit_status
    if [ $VERBOSE ]; then
        >&2 echo RESULT: $R
    fi

    # Test to see if query result is empty
    DAR=$(echo $R | jq -r '.data.aligned_reads[]')
    test_exit_status
    if [[ -z "$DAR" ]]; then
        continue
    fi

    AR=$(echo $R | jq -r '.data.aligned_reads[] | "\(.experimental_strategy)\t\(.data_format)\t\(.file_name)\t\(.file_size)\t\(.id)\t\(.md5sum)\t\(.state)"' | sed "s/^/$CASE\t$ASID\tharmonized\t/" )
    test_exit_status

    if [ ! -z $OUTFN ]; then
        echo "$AR" >> $OUTFN
    else
        echo "$AR" 
    fi

    if [ $ONLYONE ]; then
        >&2 echo Quitting after one
        break
    fi

done < $DAT

if [ ! -z $OUTFN ]; then
    >&2 echo Written to $OUTFN
fi
